1. What Is React? 
- It is a javascript library for building user interfaces.
- React uses components for building user interfaces.
- We can resuse the components.
- See pdf file for more details.

2. Writing Our First React Code
- Go to codepen.io 
- Add the following in html box 
	<div class="person">
	  <h1>Mohammed</h1>
	  <p>Your age 32</p>  
	</div>

	<div class="person">
	  <h1>Amina</h1>
	  <p>Your age 3</p>  
	</div>

  Version 1:
	<div id="p1"></div>
   
  Version 2:	
	<div id="p2"></div>
  Version 3:
    <div id="app"></div>	

- Add the following in css box
	.person {
	  display: inline-block;
	  margin: 10px;
	  border: 1px solid #eee;
	  box-shadow: 0 2px 2px #ccc;
	  width: 200px;
	  padding: 20px;
	}

- For JS Settings
	- Select react.min.js & react-dom.min.js to use.
	- Select Babel as JavaScript preprocessor.

- Add the following in javascript box	
  Version 1:	
	function Person() {  //	The function works bcoz of Babel. The syntax used in the function is called jsx.
	  return (
	  <div class="person">
	  <h1>Shaik</h1>
	  <p>Your age 22</p>  
	</div>
	  ); 
	}

	ReactDOM.render(<Person />, //Here we are converting the function into html element
	               document.querySelector('#p1')); //It renders a javascript function as a component to the real DOM.

  Version 2:
	Dynamically we can insert the data as follows
	function Person(props) {
	  return (
	  <div class="person">
	  <h1>{props.name}</h1>
	  <p>Your age {props.age}</p>  
	  </div>
	  ); 
	}
	ReactDOM.render(<Person name="Shaik" age="27"/>, 
	               document.querySelector('#p1'));
	ReactDOM.render(<Person name="Adil" age="27"/>, 
	               document.querySelector('#p2'));	

  Version 3:
	function Person(props) {
	  return (
	  <div class="person">
	  <h1>{props.name}</h1>
	  <p>Your age {props.age}</p>  
	  </div>
	  ); 
	}

	var app= (
	  <div>
	  <Person name="Shaik" age="27"/>
	  <Person name="Adil" age="27"/>
	  </div>
	);
	ReactDOM.render(app, 
	               document.querySelector('#app')); //This is most popular approach used to create components for SPA's.

3. Why React?
- UI state becomes difficult to handle with Vanilla JavaScript.
- Focus on Business Logic, not on preventing your app from exploding.
- Huge Eco System, Active Community, High Performance
- Alternatives to react are Angular, Vue | JQuery(Not so much)	

4. Understanding SPA's & MPA's
- See the image.   

5. Understanding 'let' & 'const'
- let is used to create a variable values
- const is used to create a constant values
- Avoid var to create variables

6. Arrow Functions
- Normal Function
	function myFunc() {

	}
- Arrow Function
	const myFunc = () => {

	}
- Bcoz of arrow function no more issues with this keyword.
Eg: const multiply = (number1, number2) => number1 * number2;
	console.log(multiply(2,2));
Eg: print = () => console.log("mohammed");
	print();
Eg: const print = name => console.log(name);
	print("Mohammed");

7. Exports & Imports (Modules)
- We can split our code and we can import and export them.
- For more details see the images.	

8. Understanding Classes
- Classes are similar to classes in other languages.
	class Human { 
	  constructor() {
	    this.gender = "Male";
	  }
	  printGender() {
	    console.log(this.gender);
	  }
	}


	class Person extends Human {
	  constructor() {
	    super();
	    this.name = 'Mohammed';
	    this.gender = "female";
	  }
	   printPersonName() {
	    console.log(this.name);
	  }
	}

	const person = new Person();
	person.printPersonName();
	person.printGender();

Classes, Properties & Methods
- Next generation JavaScript offeres differenet syntax of initializing properties & methods.
Eg:
	class Human { 
	    gender = "Male";

	  printGender = () =>{
	    console.log(this.gender);
	  }
	}


	class Person extends Human {
	  constructor() {
	    super();
	    name = 'Mohammed';
	    gender = "female";
	  }
	   printPersonName = () =>{
	    console.log(name);
	  }
	}

	const person = new Person();
	person.printPersonName();
	person.printGender();

- See the image for more details.	

9. The Spread & Rest Operator
Eg: 
	//For Arrays
	const numbers = [1,2,3];
	const newNumbers = [...numbers, 5, 6];
	console.log(newNumbers);

	//For Objects
	const person = {
	  name: 'Mohammed'
	};

	const newPerson = {
	  ...person,
	  age: 30
	}
	console.log(newPerson);

	//For Functions
	const filter = (...args) => {
	  return args.filter(e => e === 3);
	}

	console.log(filter(1, 2, 3, 4, 5))

10. Destructuring
- With the help of Destructuring we can take the elements from array and properties from the object and use them.
Eg:
	const numbers = [1, 2, 3];
	[n1, ,n3] = numbers;
	console.log(n1, n3);
- See the image for more details.

11. Reference & Primitive Types Refresher
- numbers, strings, booleans are so called primitive types when ever you reassign it will copy the values.
- objects & arrays are reference types here when u reassign the values will not be copied just a reference is created.
Eg: 
	//primitive types & copy the value
	const number = 1;
	const numberCopy = number;
	console.log(numberCopy);

	//object & arrays
	const person = {
	  name: "Mohammed"
	};

	const employee = person;

	console.log(employee);
	 //It will print the same value but here the values are not copied 
	//into employee 

	person.name="Shaik";

	console.log(employee);

	//Here 'shaik' will be printed but we changed to person
	//Hence employee just points to the address of person the value is not copied

	//If you want to copy the values then

	const customer = {
	  ...person
	};

	person.name="Adil";

	console.log(customer);
	//Here 'Adil' will not be printed 'Shaik' will be printed
	//As when we created the customer object Shaik was their insided person
	//Hence we had copied the properties of person into customer object.

12. Refreshing Array Functions
Eg:
	const numbers = [1,2,3];
	const doubleNumArray = numbers.map((num)=> {
	  return 2*num;
	});
	console.log(numbers);
	console.log(doubleNumArray);

	- Here map() is one of the buitl in methods of arrays.

13. Next-Gen JavaScript - Summary
- See the pdf file.	

14. JS Array Functions
- Not really next-gen JavaScript, but also important: JavaScript array functions like map() , filter() , reduce()  etc.

Array.map()
The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.
const array1 = [1, 4, 9, 16];
// pass a function to map
const map1 = array1.map(x => x * 2);
console.log(map1);
// expected output: Array [2, 8, 18, 32]

Array.find()
The find() method returns the value of the first element in the provided array that satisfies the provided testing function.
const array1 = [5, 12, 8, 130, 44];
const found = array1.find(element => element > 10);
console.log(found);
// expected output: 12

Array.findIndex()
The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.
const array1 = [5, 12, 8, 130, 44];
const isLargeNumber = (element) => element > 13;
console.log(array1.findIndex(isLargeNumber));
// expected output: 3

Array.filter()
The filter() method creates a new array with all elements that pass the test implemented by the provided function.
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]

Array.reduce()
The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.
const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;
// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10
// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15

Array.concat()
The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.
const array1 = ['a', 'b', 'c'];
const array2 = ['d', 'e', 'f'];
const array3 = array1.concat(array2);
console.log(array3);
// expected output: Array ["a", "b", "c", "d", "e", "f"]

Array.slice()
The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified.
const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
console.log(animals.slice(2));
// expected output: Array ["camel", "duck", "elephant"]
console.log(animals.slice(2, 4));
// expected output: Array ["camel", "duck"]
console.log(animals.slice(1, 5));
// expected output: Array ["bison", "camel", "duck", "elephant"]

Array.splice()
The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// inserts at index 1
console.log(months);
// expected output: Array ["Jan", "Feb", "March", "April", "June"]
months.splice(4, 1, 'May');
// replaces 1 element at index 4
console.log(months);
// expected output: Array ["Jan", "Feb", "March", "April", "May"]













 

 



	 



