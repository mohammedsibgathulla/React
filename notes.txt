1. What Is React? 
- It is a javascript library for building user interfaces.
- React uses components for building user interfaces.
- We can resuse the components.
- See pdf file for more details.

2. Writing Our First React Code
- Go to codepen.io 
- Add the following in html box 
	<div class="person">
	  <h1>Mohammed</h1>
	  <p>Your age 32</p>  
	</div>

	<div class="person">
	  <h1>Amina</h1>
	  <p>Your age 3</p>  
	</div>

  Version 1:
	<div id="p1"></div>
   
  Version 2:	
	<div id="p2"></div>
  Version 3:
    <div id="app"></div>	

- Add the following in css box
	.person {
	  display: inline-block;
	  margin: 10px;
	  border: 1px solid #eee;
	  box-shadow: 0 2px 2px #ccc;
	  width: 200px;
	  padding: 20px;
	}

- For JS Settings
	- Select react.min.js & react-dom.min.js to use.
	- Select Babel as JavaScript preprocessor.

- Add the following in javascript box	
  Version 1:	
	function Person() {  //	The function works bcoz of Babel. The syntax used in the function is called jsx.
	  return (
	  <div class="person">
	  <h1>Shaik</h1>
	  <p>Your age 22</p>  
	</div>
	  ); 
	}

	ReactDOM.render(<Person />, //Here we are converting the function into html element
	               document.querySelector('#p1')); //It renders a javascript function as a component to the real DOM.

  Version 2:
	Dynamically we can insert the data as follows
	function Person(props) {
	  return (
	  <div class="person">
	  <h1>{props.name}</h1>
	  <p>Your age {props.age}</p>  
	  </div>
	  ); 
	}
	ReactDOM.render(<Person name="Shaik" age="27"/>, 
	               document.querySelector('#p1'));
	ReactDOM.render(<Person name="Adil" age="27"/>, 
	               document.querySelector('#p2'));	

  Version 3:
	function Person(props) {
	  return (
	  <div class="person">
	  <h1>{props.name}</h1>
	  <p>Your age {props.age}</p>  
	  </div>
	  ); 
	}

	var app= (
	  <div>
	  <Person name="Shaik" age="27"/>
	  <Person name="Adil" age="27"/>
	  </div>
	);
	ReactDOM.render(app, 
	               document.querySelector('#app')); //This is most popular approach used to create components for SPA's.

3. Why React?
- UI state becomes difficult to handle with Vanilla JavaScript.
- Focus on Business Logic, not on preventing your app from exploding.
- Huge Eco System, Active Community, High Performance
- Alternatives to react are Angular, Vue | JQuery(Not so much)	

4. Understanding SPA's & MPA's
- See the image.   

5. Understanding 'let' & 'const'
- let is used to create a variable values
- const is used to create a constant values
- Avoid var to create variables

6. Arrow Functions
- Normal Function
	function myFunc() {

	}
- Arrow Function
	const myFunc = () => {

	}
- Bcoz of arrow function no more issues with this keyword.
Eg: const multiply = (number1, number2) => number1 * number2;
	console.log(multiply(2,2));
Eg: print = () => console.log("mohammed");
	print();
Eg: const print = name => console.log(name);
	print("Mohammed");

7. Exports & Imports (Modules)
- We can split our code and we can import and export them.
- For more details see the images.	

8. Understanding Classes
- Classes are similar to classes in other languages.
	class Human { 
	  constructor() {
	    this.gender = "Male";
	  }
	  printGender() {
	    console.log(this.gender);
	  }
	}


	class Person extends Human {
	  constructor() {
	    super();
	    this.name = 'Mohammed';
	    this.gender = "female";
	  }
	   printPersonName() {
	    console.log(this.name);
	  }
	}

	const person = new Person();
	person.printPersonName();
	person.printGender();

Classes, Properties & Methods
- Next generation JavaScript offeres differenet syntax of initializing properties & methods.
Eg:
	class Human { 
	    gender = "Male";

	  printGender = () =>{
	    console.log(this.gender);
	  }
	}


	class Person extends Human {
	  constructor() {
	    super();
	    name = 'Mohammed';
	    gender = "female";
	  }
	   printPersonName = () =>{
	    console.log(name);
	  }
	}

	const person = new Person();
	person.printPersonName();
	person.printGender();

- See the image for more details.	

9. The Spread & Rest Operator
Eg: 
	//For Arrays
	const numbers = [1,2,3];
	const newNumbers = [...numbers, 5, 6];
	console.log(newNumbers);

	//For Objects
	const person = {
	  name: 'Mohammed'
	};

	const newPerson = {
	  ...person,
	  age: 30
	}
	console.log(newPerson);

	//For Functions
	const filter = (...args) => {
	  return args.filter(e => e === 3);
	}

	console.log(filter(1, 2, 3, 4, 5))

10. Destructuring
- With the help of Destructuring we can take the elements from array and properties from the object and use them.
Eg:
	const numbers = [1, 2, 3];
	[n1, ,n3] = numbers;
	console.log(n1, n3);
- See the image for more details.

11. Reference & Primitive Types Refresher
- numbers, strings, booleans are so called primitive types when ever you reassign it will copy the values.
- objects & arrays are reference types here when u reassign the values will not be copied just a reference is created.
Eg: 
	//primitive types & copy the value
	const number = 1;
	const numberCopy = number;
	console.log(numberCopy);

	//object & arrays
	const person = {
	  name: "Mohammed"
	};

	const employee = person;

	console.log(employee);
	 //It will print the same value but here the values are not copied 
	//into employee 

	person.name="Shaik";

	console.log(employee);

	//Here 'shaik' will be printed but we changed to person
	//Hence employee just points to the address of person the value is not copied

	//If you want to copy the values then

	const customer = {
	  ...person
	};

	person.name="Adil";

	console.log(customer);
	//Here 'Adil' will not be printed 'Shaik' will be printed
	//As when we created the customer object Shaik was their insided person
	//Hence we had copied the properties of person into customer object.

12. Refreshing Array Functions
Eg:
	const numbers = [1,2,3];
	const doubleNumArray = numbers.map((num)=> {
	  return 2*num;
	});
	console.log(numbers);
	console.log(doubleNumArray);

	- Here map() is one of the buitl in methods of arrays.

13. Next-Gen JavaScript - Summary
- See the pdf file.	

14. JS Array Functions
- Not really next-gen JavaScript, but also important: JavaScript array functions like map() , filter() , reduce()  etc.

Array.map()
The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.
const array1 = [1, 4, 9, 16];
// pass a function to map
const map1 = array1.map(x => x * 2);
console.log(map1);
// expected output: Array [2, 8, 18, 32]

Array.find()
The find() method returns the value of the first element in the provided array that satisfies the provided testing function.
const array1 = [5, 12, 8, 130, 44];
const found = array1.find(element => element > 10);
console.log(found);
// expected output: 12

Array.findIndex()
The findIndex() method returns the index of the first element in the array that satisfies the provided testing function. Otherwise, it returns -1, indicating that no element passed the test.
const array1 = [5, 12, 8, 130, 44];
const isLargeNumber = (element) => element > 13;
console.log(array1.findIndex(isLargeNumber));
// expected output: 3

Array.filter()
The filter() method creates a new array with all elements that pass the test implemented by the provided function.
const words = ['spray', 'limit', 'elite', 'exuberant', 'destruction', 'present'];
const result = words.filter(word => word.length > 6);
console.log(result);
// expected output: Array ["exuberant", "destruction", "present"]

Array.reduce()
The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.
const array1 = [1, 2, 3, 4];
const reducer = (accumulator, currentValue) => accumulator + currentValue;
// 1 + 2 + 3 + 4
console.log(array1.reduce(reducer));
// expected output: 10
// 5 + 1 + 2 + 3 + 4
console.log(array1.reduce(reducer, 5));
// expected output: 15

Array.concat()
The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.
const array1 = ['a', 'b', 'c'];
const array2 = ['d', 'e', 'f'];
const array3 = array1.concat(array2);
console.log(array3);
// expected output: Array ["a", "b", "c", "d", "e", "f"]

Array.slice()
The slice() method returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array. The original array will not be modified.
const animals = ['ant', 'bison', 'camel', 'duck', 'elephant'];
console.log(animals.slice(2));
// expected output: Array ["camel", "duck", "elephant"]
console.log(animals.slice(2, 4));
// expected output: Array ["camel", "duck"]
console.log(animals.slice(1, 5));
// expected output: Array ["bison", "camel", "duck", "elephant"]

Array.splice()
The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
const months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// inserts at index 1
console.log(months);
// expected output: Array ["Jan", "Feb", "March", "April", "June"]
months.splice(4, 1, 'May');
// replaces 1 element at index 4
console.log(months);
// expected output: Array ["Jan", "Feb", "March", "April", "May"]

15. The Build Workflow
- See the image for more details.

16. Using Create React App
- Check the url https://github.com/facebook/create-react-app

17. Understanding The Folder Structure
- package.json file is created by the react app. It has all the dependencies used in the project and scripts. 
- node_modules folder holds all the dependencies and sub dependencies of our project. You will not add anything in the node_modules folder. It is generated automatically if you run 'npm install' 
- public folder is the root folder which gets served by the webserver in the end though here it only holds the files we can edit the script files are added in the src folder. In this folder we have index.html file we never add more html pages in this project. If you are creating a multipage project you would create multiple such projects with create react app you wouldn't add more html pages here.
- manifest.json file have the metadata about our application.
- src folder have couple of files with these file we will work and this is our actual react application. Here index.js file get access to the root element in the index.html file and it will render our react application with ReactDOM.render() method. 
	ReactDOM.render(
	  <React.StrictMode>
	    <App />
	  </React.StrictMode>,
	  document.getElementById('root')
	);

	The  <App /> object or element is imported for an ./App file which is the App component.
	App.css file have the css which is used by App.js these are global stylings. We also have index.css file it also applies styles globally. It is used for some general setup.
	//To change the permission of a folder and its contents -> sudo chmod -R 777 //will give read, write, and execute permissions for everyone.

- serviceWorker.js file is for registering a service worker it is generated automatically. It will basically pre-cache our script files. 
- App.test.js file it basically allows unit tests for components in our application. 	

18. Understanding Component Basics
- We will have one root app component and we will nest all other components in the root component. 
- Component has render() method React calls this method to render something to the screen. Every React component has to return or render some html code which can be redered to the DOM to the screen. In the current version it is done implicitly for us no need to write it we just use return method and instead of class we can use function.
- we then expor the App component as default. 

	import React from 'react';
	import './App.css';

	function App() {
	  return (
	    <div className="App">
	      <h1> Hi, I am a React App</h1>  //It is the jsx code and not html.
	    </div>
	  );
	}

	export default App;

19. Understanding JSX
- See the project.

20. JSX Restrictions
- we can't use some keywords in normal html in bcoz there may be ambiguity problems like class in html is className in jsx as it leads to ambiguity.

21. Creating A Functional Component
- We have created a functional component and modified the previous root functional component to a class component, see the project.

22. Components & JSX Cheat Sheet.
- See the pdf file.

23. Working With Components & Re-Using Them
- See the project.

24. Outputting Dynamic Content
- We use {} to implement the dynamic content.
- See the project for more details.

25. Working With Props
- See the project.

26. Understatnding The "Children" Prop
- Children are anything between the <User> </User>.
- It can be text or <li> or <p> or anything.
- See the project.

27. Understanding & Using State
- See the project & pdf file.

28. Handling Events With Methods
- See the project.
	To Which Events Can You Listen?
	In the lecture, we saw that you can react to the onClick event - but to which other events can you listen? You can find a list of supported events here: https://reactjs.org/docs/events.html#supported-events
	Clipboard Events

	Event names:

	    onCopy onCut onPaste

	Properties:

	    DOMDataTransfer clipboardData

	Composition Events

	Event names:

	    onCompositionEnd onCompositionStart onCompositionUpdate

	Properties:

	    string data

	Keyboard Events

	Event names:

	    onKeyDown onKeyPress onKeyUp

	Properties:

	    boolean altKey
	    number charCode
	    boolean ctrlKey
	    boolean getModifierState(key)
	    string key
	    number keyCode
	    string locale
	    number location
	    boolean metaKey
	    boolean repeat
	    boolean shiftKey
	    number which

	Focus Events

	Event names:

	    onFocus onBlur

	These focus events work on all elements in the React DOM, not just form elements.

	Properties:

	    DOMEventTarget relatedTarget

	Form Events

	Event names:

	    onChange onInput onInvalid onSubmit

	For more information about the onChange event, see Forms.

	Mouse Events

	Event names:

	    onClick onContextMenu onDoubleClick onDrag onDragEnd onDragEnter onDragExit
	    onDragLeave onDragOver onDragStart onDrop onMouseDown onMouseEnter onMouseLeave
	    onMouseMove onMouseOut onMouseOver onMouseUp

	The onMouseEnter and onMouseLeave events propagate from the element being left to the one being entered instead of ordinary bubbling and do not have a capture phase.

	Properties:

	    boolean altKey
	    number button
	    number buttons
	    number clientX
	    number clientY
	    boolean ctrlKey
	    boolean getModifierState(key)
	    boolean metaKey
	    number pageX
	    number pageY
	    DOMEventTarget relatedTarget
	    number screenX
	    number screenY
	    boolean shiftKey

	Selection Events

	Event names:

	    onSelect

	Touch Events

	Event names:

	    onTouchCancel onTouchEnd onTouchMove onTouchStart

	Properties:

	    boolean altKey
	    DOMTouchList changedTouches
	    boolean ctrlKey
	    boolean getModifierState(key)
	    boolean metaKey
	    boolean shiftKey
	    DOMTouchList targetTouches
	    DOMTouchList touches

	UI Events

	Event names:

	    onScroll

	Properties:

	    number detail
	    DOMAbstractView view

	Wheel Events

	Event names:

	    onWheel

	Properties:

	    number deltaMode
	    number deltaX
	    number deltaY
	    number deltaZ

	Media Events

	Event names:

	    onAbort onCanPlay onCanPlayThrough onDurationChange onEmptied onEncrypted
	    onEnded onError onLoadedData onLoadedMetadata onLoadStart onPause onPlay
	    onPlaying onProgress onRateChange onSeeked onSeeking onStalled onSuspend
	    onTimeUpdate onVolumeChange onWaiting

	Image Events

	Event names:

	    onLoad onError

	Animation Events

	Event names:

	    onAnimationStart onAnimationEnd onAnimationIteration

	Properties:

	    string animationName
	    string pseudoElement
	    float elapsedTime

	Transition Events

	Event names:

	    onTransitionEnd

	Properties:

	    string propertyName
	    string pseudoElement
	    float elapsedTime

	Other Events

	Event names:

	    onToggle


29. Manipulating The State
- See the project.

30. Using The useState() Hook For State Manipulation
- We use state in class based components and useState() in function based components.
- See the projects.

31. Stateless vs Stateful Components
- In our project my-app the person component is a stateless component bcoz it has no internal state management and it is a good practice to create as many of these stateless components also called dumb bcoz they have no internal logic or 'Presentational Components' bcoz they present something the output content they get external data and output it in a structural way. 
- The class based components with state and functional based components with useState are also called 'Smart Components' or 'Container Components' bcoz they container the state of your application. 

32. Passing Method References Between Components
- You can pass methods also as props.
- We can pass arguments in two ways i.e one by using the bind method and the other by using the arrow function.
- The arrow function can be inefficient react can re render certain things in you app too often. So it is not recommended that much you can use the bind method.

33. Adding Two Way Binding
- We use onChange on input text to box to update the value of the variable.
- See the project.

34. Adding Styling With Stylesheets
- You have to import the style sheet in your class else the styles will not be applied.
- See the project.

35. Working With Inline Styles
- The css style properties have javascript representation. Like for background-color we have backgroundColor.
- See the project. 

36. Assignment & Solution
- See the image & project.

37. Rendering Content Conditionally
- We can inject javascript expressions into JSX with single { } braces. 
- See the project. 

38. Handling Dynamic Content "The JavaScript Way"
- See the project. 













 

 



	 



