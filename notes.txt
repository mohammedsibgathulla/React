1. What Is React? 
- It is a javascript library for building user interfaces.
- React uses components for building user interfaces.
- We can resuse the components.
- See pdf file for more details.

2. Writing Our First React Code
- Go to codepen.io 
- Add the following in html box 
	<div class="person">
	  <h1>Mohammed</h1>
	  <p>Your age 32</p>  
	</div>

	<div class="person">
	  <h1>Amina</h1>
	  <p>Your age 3</p>  
	</div>

  Version 1:
	<div id="p1"></div>
   
  Version 2:	
	<div id="p2"></div>
  Version 3:
    <div id="app"></div>	

- Add the following in css box
	.person {
	  display: inline-block;
	  margin: 10px;
	  border: 1px solid #eee;
	  box-shadow: 0 2px 2px #ccc;
	  width: 200px;
	  padding: 20px;
	}

- For JS Settings
	- Select react.min.js & react-dom.min.js to use.
	- Select Babel as JavaScript preprocessor.

- Add the following in javascript box	
  Version 1:	
	function Person() {  //	The function works bcoz of Babel. The syntax used in the function is called jsx.
	  return (
	  <div class="person">
	  <h1>Shaik</h1>
	  <p>Your age 22</p>  
	</div>
	  ); 
	}

	ReactDOM.render(<Person />, //Here we are converting the function into html element
	               document.querySelector('#p1')); //It renders a javascript function as a component to the real DOM.

  Version 2:
	Dynamically we can insert the data as follows
	function Person(props) {
	  return (
	  <div class="person">
	  <h1>{props.name}</h1>
	  <p>Your age {props.age}</p>  
	  </div>
	  ); 
	}
	ReactDOM.render(<Person name="Shaik" age="27"/>, 
	               document.querySelector('#p1'));
	ReactDOM.render(<Person name="Adil" age="27"/>, 
	               document.querySelector('#p2'));	

  Version 3:
	function Person(props) {
	  return (
	  <div class="person">
	  <h1>{props.name}</h1>
	  <p>Your age {props.age}</p>  
	  </div>
	  ); 
	}

	var app= (
	  <div>
	  <Person name="Shaik" age="27"/>
	  <Person name="Adil" age="27"/>
	  </div>
	);
	ReactDOM.render(app, 
	               document.querySelector('#app')); //This is most popular approach used to create components for SPA's.

3. Why React?
- UI state becomes difficult to handle with Vanilla JavaScript.
- Focus on Business Logic, not on preventing your app from exploding.
- Huge Eco System, Active Community, High Performance
- Alternatives to react are Angular, Vue | JQuery(Not so much)	

4. Understanding SPA's & MPA's
- See the image.   

5. Understanding 'let' & 'const'
- let is used to create a variable values
- const is used to create a constant values
- Avoid var to create variables

6. Arrow Functions
- Normal Function
	function myFunc() {

	}
- Arrow Function
	const myFunc = () => {

	}
- Bcoz of arrow function no more issues with this keyword.
Eg: const multiply = (number1, number2) => number1 * number2;
	console.log(multiply(2,2));
Eg: print = () => console.log("mohammed");
	print();
Eg: const print = name => console.log(name);
	print("Mohammed");

7. Exports & Imports (Modules)
- We can split our code and we can import and export them.
- For more details see the images.	

8. Understanding Classes
- Classes are similar to classes in other languages.
	class Human { 
	  constructor() {
	    this.gender = "Male";
	  }
	  printGender() {
	    console.log(this.gender);
	  }
	}


	class Person extends Human {
	  constructor() {
	    super();
	    this.name = 'Mohammed';
	    this.gender = "female";
	  }
	   printPersonName() {
	    console.log(this.name);
	  }
	}

	const person = new Person();
	person.printPersonName();
	person.printGender();

Classes, Properties & Methods
- Next generation JavaScript offeres differenet syntax of initializing properties & methods.
Eg:
	class Human { 
	    gender = "Male";

	  printGender = () =>{
	    console.log(this.gender);
	  }
	}


	class Person extends Human {
	  constructor() {
	    super();
	    name = 'Mohammed';
	    gender = "female";
	  }
	   printPersonName = () =>{
	    console.log(name);
	  }
	}

	const person = new Person();
	person.printPersonName();
	person.printGender();

- See the image for more details.	

9. The Spread & Rest Operator
Eg: 
	//For Arrays
	const numbers = [1,2,3];
	const newNumbers = [...numbers, 5, 6];
	console.log(newNumbers);

	//For Objects
	const person = {
	  name: 'Mohammed'
	};

	const newPerson = {
	  ...person,
	  age: 30
	}
	console.log(newPerson);

	//For Functions
	const filter = (...args) => {
	  return args.filter(e => e === 3);
	}

	console.log(filter(1, 2, 3, 4, 5))

10. Destructuring
- With the help of Destructuring we can take the elements from array and properties from the object and use them.
Eg:
	const numbers = [1, 2, 3];
	[n1, ,n3] = numbers;
	console.log(n1, n3);
- See the image for more details.

	





 

 



	 



